Approach:
Use two pointers (first and second), both initially pointing to the head of the linked list.
Move the first pointer k nodes ahead. This ensures that the first pointer will be ahead of the second pointer by k nodes.
Now, move both first and second pointers one node at a time. When the first pointer reaches the end of the list (NULL), the second pointer will be at the k-th node from the end.
If k is greater than the number of nodes in the list, return -1.

class Solution {
  public:
    int getKthFromLast(Node *head, int k) {
       // Initialize two pointers to the head of the linked list
        Node *first = head;
        Node *second = head;
        // Move the first pointer k steps ahead
        for(int i=0;i<k;i++){
            if(first==NULL){
                return -1;  // If k is greater than the length of the list, return -1
            }
            first = first->next;
        }
        // Move both pointers until the first pointer reaches the end
        while (first != nullptr) {
            first = first->next;
            second = second->next;
        }
      // The second pointer is now pointing to the kth node from the end
        return second->data;
    }
};
